apiVersion: cluster.x-k8s.io/v1alpha2
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-md-0
  labels:
    cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
    nodepool: nodepool-0
spec:
  replicas: ${MACHINE_REPLICAS}
  selector:
    matchLabels:
      cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
      nodepool: nodepool-0
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
        nodepool: nodepool-0
    spec:
      version: ${KUBERNETES_VERSION}
      bootstrap:
        configRef:
          name: ${CLUSTER_NAME}-md-0
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: ${CLUSTER_NAME}-md-0
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
        kind: AzureStackHCIMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
kind: AzureStackHCIMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
spec:
  template:
    spec:
      location: westus
      vmSize: ${NODE_MACHINE_TYPE}
      image:
        offer: "linux"
      sshPublicKey: ${SSH_PUBLIC_KEY}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
kind: KubeadmConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          name: '{{ ds.meta_data["local_hostname"] }}'
      preKubeadmCommands:
      - bash -c /tmp/kubeadm-bootstrap.sh
      postKubeadmCommands:
      - bash -c /tmp/kubeadm-postinstall.sh
      files:
      - path: /tmp/kubeadm-bootstrap.sh
        owner: "root:root"
        permissions: "0744"
        content: |
          #!/bin/bash

          set -eux

          function os_setup {
            command -v "awk" >/dev/null 2>&1 || tdnf install -y awk
          }

          function dockerd_prereq() {
            swapoff -a
            modprobe overlay
            modprobe br_netfilter

            cat > /etc/sysctl.d/99-sysctl-kubernetes-cri.conf <<EOF
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          EOF

            iptables -P INPUT ACCEPT
            iptables -P OUTPUT ACCEPT
            iptables -P FORWARD ACCEPT

            sysctl --system
          }

          function dockerd_install() {

            # Workaround a date/time race issue that causes apt-get update to fail
            until apt-get update; do
              sleep 1
            done

            # Steps from https://kubernetes.io/docs/setup/cri/

            ### Install packages to allow apt to use a repository over HTTPS
            apt-get install -y apt-transport-https ca-certificates curl software-properties-common

            ### Add Dockerâ€™s official GPG key
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

            ### Add Docker apt repository.
            add-apt-repository \
              "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) \
              stable"

            ## Install Docker CE.
            apt-get update && apt-get install -y docker-ce=18.06* #=18.06.2~ce~3-0~ubuntu

            # Setup daemon.
            cat > /etc/docker/daemon.json <<EOF
          {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "100m"
          },
          "storage-driver": "overlay2"
          }
          EOF

            mkdir -p /etc/systemd/system/docker.service.d
          }

          function systemctl_config() {
            systemctl daemon-reload
            systemctl enable docker
            systemctl restart docker
            systemctl enable azurestackhci_boot
          }

          function kubernetes_install_ubuntu() {
            apt-get update && apt-get install -y apt-transport-https curl
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
            cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
          deb https://apt.kubernetes.io/ kubernetes-xenial main
          EOF
            apt-get update
            apt-get install -y kubelet="${KUBERNETES_SEMVER}-00" kubeadm="${KUBERNETES_SEMVER}-00" kubectl="${KUBERNETES_SEMVER}-00"
            apt-mark hold kubelet kubeadm kubectl
          }

          function kubernetes_install() {
            K8S_VERSION="${KUBERNETES_SEMVER}"
            KUBEADM_VERSION="${KUBERNETES_SEMVER}"
            #tdnf install -y kubernetes-${KUBERNETES_SEMVER} kubernetes-kubeadm-${KUBERNETES_SEMVER} kubernetes-pause-${KUBERNETES_SEMVER}

            cat > /etc/sysctl.d/90-kubelet.conf << EOF
          vm.overcommit_memory=1
          kernel.panic=10
          kernel.panic_on_oops=1
          EOF
            sysctl -p /etc/sysctl.d/90-kubelet.conf
            sudo swapoff -a
          }

          # First setup the os with any required packages
          os_setup

          if [ "$(hostnamectl | awk '/Operating System:/ {print $3}')" = "Ubuntu" ]; then
            # Ubuntu steps
            dockerd_prereq
            dockerd_install
            systemctl_config
            kubernetes_install_ubuntu
          else
            # Default steps
            dockerd_prereq
            systemctl_config
            kubernetes_install
          fi
      - path: /tmp/kubeadm-postinstall.sh
        owner: "root:root"
        permissions: "0744"
        content: |
          #!/bin/bash

          set -euxo pipefail

          # Temp, this responsibility will move to caph
          function patch_node_providerid() {
            for value in {1..10}
            do
              sleep 1
              echo "Patch ProviderID (attempt $value)..."
              KUBECONFIG=/etc/kubernetes/kubelet.conf kubectl patch node {{ ds.meta_data["local_hostname"] }} -p $'spec:\n providerID: azurestackhci:////{{ ds.meta_data["local_hostname"] }}' >/dev/null 2>&1 || continue
              break
            done
          }

          function save_iptables_config() {
            iptables-save > /etc/sysconfig/iptables
          }

          save_iptables_config
          patch_node_providerid
      - path: /etc/kubernetes/azurestackhci.json
        owner: "root:root"
        permissions: "0644"
        content: |
          {
            "cloud": "AzureStackHCICloud",
            "tenantID": "",
            "subscriptionID": "1234",
            "resourceGroup": "test",
            "securityGroupName": "",
            "location": "westus2",
            "vmType": "vmss",
            "vnetName": "External",
            "vnetResourceGroup": "test",
            "subnetName": "cluster",
            "routeTableName": "",
            "userAssignedID": "",
            "loadBalancerSku": "Standard",
            "maximumLoadBalancerRuleCount": 250,
            "useManagedIdentityExtension": true,
            "useInstanceMetadata": true
          }
      - path: /etc/rc.d/init.d/azurestackhci_boot.sh
        owner: root:root
        permissions: '0755'
        content: |
          #!/bin/bash
          iptables-restore -v -w < /etc/sysconfig/iptables
      - path: /etc/systemd/system/azurestackhci_boot.service
        owner: root:root
        permissions: '0644'
        content: |
          [Unit]
          Description=azurestackhci_boot
          After=network.target
          
          [Service]
          Type=simple
          ExecStart=/etc/rc.d/init.d/azurestackhci_boot.sh
          TimeoutStartSec=0
          
          [Install]
          WantedBy=default.target
          
