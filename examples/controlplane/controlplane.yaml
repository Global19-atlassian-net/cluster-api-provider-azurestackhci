apiVersion: cluster.x-k8s.io/v1alpha2
kind: Machine
metadata:
  name: ${CLUSTER_NAME}-controlplane-0
  labels:
    cluster.x-k8s.io/control-plane: "true"
    cluster.x-k8s.io/cluster-name: "${CLUSTER_NAME}"
spec:
  version: ${KUBERNETES_VERSION}
  bootstrap:
    configRef:
      apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
      kind: KubeadmConfig
      name: ${CLUSTER_NAME}-controlplane-0
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
    kind: AzureStackHCIMachine
    name: ${CLUSTER_NAME}-controlplane-0
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
kind: AzureStackHCIMachine
metadata:
  name: ${CLUSTER_NAME}-controlplane-0
spec:
  location: westus
  vmSize: ${CONTROL_PLANE_MACHINE_TYPE}
  image:
    offer: "linux"
  sshPublicKey: ${SSH_PUBLIC_KEY}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
kind: KubeadmConfig
metadata:
  name: ${CLUSTER_NAME}-controlplane-0
spec:
  initConfiguration:
    nodeRegistration:
      name: '{{ ds.meta_data["local_hostname"] }}'
  clusterConfiguration:
    apiServer:
      timeoutForControlPlane: 20m
      extraArgs:
        audit-log-maxage: "30"
        audit-log-maxbackup: "10"
        audit-log-maxsize: "100"
        audit-log-path: /var/log/apiserver/audit.log
        profiling: "false"
    controllerManager:
      extraArgs:
        profiling: "false"
        terminated-pod-gc-threshold: "10"
    scheduler:
      extraArgs:
        profiling: "false"
  preKubeadmCommands:
  - bash -c /tmp/kubeadm-bootstrap.sh
  postKubeadmCommands:
  - bash -c /tmp/kubeadm-postinstall.sh
  files:
  - path: /tmp/kubeadm-bootstrap.sh
    owner: "root:root"
    permissions: "0744"
    content: |
      #!/bin/bash

      set -eux

      function os_setup {
        command -v "awk" >/dev/null 2>&1 || tdnf install -y awk
      }

      function dockerd_prereq() {
        swapoff -a
        modprobe overlay
        modprobe br_netfilter

        cat > /etc/sysctl.d/99-sysctl-kubernetes-cri.conf <<EOF
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF

        iptables -P INPUT ACCEPT
        iptables -P OUTPUT ACCEPT
        iptables -P FORWARD ACCEPT

        sysctl --system
      }

      function dockerd_install() {

        # Workaround a date/time race issue that causes apt-get update to fail
        until apt-get update; do
          sleep 1
        done

        # Steps from https://kubernetes.io/docs/setup/cri/

        ### Install packages to allow apt to use a repository over HTTPS
        apt-get install -y apt-transport-https ca-certificates curl software-properties-common

        ### Add Dockers official GPG key
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

        ### Add Docker apt repository.
        add-apt-repository \
          "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) \
          stable"

        ## Install Docker CE.
        apt-get update && apt-get install -y docker-ce=18.06*

        # Setup daemon.
        cat > /etc/docker/daemon.json <<EOF
      {
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "100m"
      },
      "storage-driver": "overlay2"
      }
      EOF

        mkdir -p /etc/systemd/system/docker.service.d
      }

      function systemctl_config() {
        systemctl daemon-reload
        systemctl enable docker
        systemctl restart docker
        systemctl enable azurestackhci_boot
      }

      function kubernetes_install_ubuntu() {
        apt-get update && apt-get install -y apt-transport-https curl
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
        cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
      deb https://apt.kubernetes.io/ kubernetes-xenial main
      EOF
        apt-get update
        apt-get install -y kubelet="${KUBERNETES_SEMVER}-00" kubeadm="${KUBERNETES_SEMVER}-00" kubectl="${KUBERNETES_SEMVER}-00"
        apt-mark hold kubelet kubeadm kubectl
      }

      function kubernetes_install() {
        K8S_VERSION="${KUBERNETES_SEMVER}"
        KUBEADM_VERSION="${KUBERNETES_SEMVER}"
        #tdnf install -y kubernetes-${KUBERNETES_SEMVER} kubernetes-kubeadm-${KUBERNETES_SEMVER} kubernetes-pause-${KUBERNETES_SEMVER}

        cat > /etc/sysctl.d/90-kubelet.conf << EOF
      vm.overcommit_memory=1
      kernel.panic=10
      kernel.panic_on_oops=1
      EOF
        sysctl -p /etc/sysctl.d/90-kubelet.conf
        sudo swapoff -a
      }

      # First setup the os with any required packages (e.g. awk)
      os_setup

      if [ "$(hostnamectl | awk '/Operating System:/ {print $3}')" = "Ubuntu" ]; then
        # Ubuntu steps
        dockerd_prereq
        dockerd_install
        systemctl_config
        kubernetes_install_ubuntu
      else
        # Default steps
        dockerd_prereq
        systemctl_config
        kubernetes_install
      fi
  - path: /tmp/kubeadm-postinstall.sh
    owner: "root:root"
    permissions: "0744"
    content: |
      #!/bin/bash

      set -euxo pipefail

      function kube_config() {
        mkdir -p /home/${CAPH_USER}/.kube
        cp /etc/kubernetes/admin.conf /home/${CAPH_USER}/.kube/config
        chown ${CAPH_USER} /home/${CAPH_USER}/.kube
        chown ${CAPH_USER} /home/${CAPH_USER}/.kube/config
      }

      function flannel_install() {
        KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f /etc/kubernetes/cni/kube-flannel.yml
      }

      # Temp, this responsibility will move to caph
      function patch_node_providerid() {
        for value in {1..10}
        do
          sleep 1
          echo "Patch ProviderID (attempt $value)..."
          KUBECONFIG=/etc/kubernetes/admin.conf kubectl patch node {{ ds.meta_data["local_hostname"] }} -p $'spec:\n providerID: azurestackhci:////{{ ds.meta_data["local_hostname"] }}' >/dev/null 2>&1 || continue
          break
        done
      }

      function save_iptables_config() {
        iptables-save > /etc/sysconfig/iptables
      }

      kube_config
      flannel_install
      save_iptables_config
      patch_node_providerid
  - path: /etc/kubernetes/azurestackhci.json
    owner: "root:root"
    permissions: "0644"
    content: |
      {
        "cloud": "AzureStackHCICloud",
        "tenantID": "",
        "subscriptionID": "1234",
        "resourceGroup": "test",
        "securityGroupName": "",
        "location": "westus2",
        "vmType": "vmss",
        "vnetName": "External",
        "vnetResourceGroup": "test",
        "subnetName": "cluster",
        "routeTableName": "",
        "userAssignedID": "",
        "loadBalancerSku": "Standard",
        "maximumLoadBalancerRuleCount": 250,
        "useManagedIdentityExtension": true,
        "useInstanceMetadata": true
      }
  - path: /etc/rc.d/init.d/azurestackhci_boot.sh
    owner: root:root
    permissions: '0755'
    content: |
        #!/bin/bash
        iptables-restore -v -w < /etc/sysconfig/iptables
  - path: /etc/systemd/system/azurestackhci_boot.service
    owner: root:root
    permissions: '0644'
    content: |
        [Unit]
        Description=azurestackhci_boot
        After=network.target
        
        [Service]
        Type=simple
        ExecStart=/etc/rc.d/init.d/azurestackhci_boot.sh
        TimeoutStartSec=0
        
        [Install]
        WantedBy=default.target
